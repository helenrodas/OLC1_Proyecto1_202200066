/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package DataForge;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.FlowLayout;
import static java.awt.SystemColor.window;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.io.Reader;
import java.nio.file.Files;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.SwingUtilities;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author lenovo
 */
public class FrmPrincipal extends javax.swing.JFrame {

    /**
     * Creates new form FrmPrincipal
     */
            
    private String filePath;
    public FrmPrincipal() {
        initComponents();
        this.setLocationRelativeTo(null);
        
        
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanelPrincipal = new javax.swing.JPanel();
        jTabbedPaneArchivos = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtEditor = new javax.swing.JTextArea();
        btnNuevo = new javax.swing.JButton();
        btnAbrir = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextAreaConsola = new javax.swing.JTextArea();
        btnVerGraficas = new javax.swing.JButton();
        jPanelGraficas = new javax.swing.JPanel();
        btnEjecutar = new javax.swing.JButton();
        btnReportes = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanelPrincipal.setBackground(new java.awt.Color(124, 169, 213));
        jPanelPrincipal.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanelPrincipal.setForeground(new java.awt.Color(74, 110, 176));

        jTabbedPaneArchivos.setForeground(new java.awt.Color(74, 110, 176));
        jTabbedPaneArchivos.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTabbedPaneArchivosMousePressed(evt);
            }
        });

        jPanel1.setForeground(new java.awt.Color(0, 51, 102));
        jPanel1.setToolTipText("");

        txtEditor.setColumns(20);
        txtEditor.setRows(5);
        jScrollPane2.setViewportView(txtEditor);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(15, 15, 15)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 427, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 272, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPaneArchivos.addTab("Archivo1", jPanel1);

        btnNuevo.setBackground(new java.awt.Color(0, 51, 102));
        btnNuevo.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        btnNuevo.setForeground(new java.awt.Color(255, 255, 255));
        btnNuevo.setText("Nuevo");
        btnNuevo.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btnNuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNuevoActionPerformed(evt);
            }
        });

        btnAbrir.setBackground(new java.awt.Color(0, 51, 102));
        btnAbrir.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        btnAbrir.setForeground(new java.awt.Color(255, 255, 255));
        btnAbrir.setText("Abrir");
        btnAbrir.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btnAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAbrirActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setText("Entrada");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel2.setText("Consola");

        TextAreaConsola.setEditable(false);
        TextAreaConsola.setColumns(20);
        TextAreaConsola.setRows(5);
        jScrollPane1.setViewportView(TextAreaConsola);

        btnVerGraficas.setBackground(new java.awt.Color(0, 51, 102));
        btnVerGraficas.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        btnVerGraficas.setForeground(new java.awt.Color(255, 255, 255));
        btnVerGraficas.setText("Ver Graficas");

        javax.swing.GroupLayout jPanelGraficasLayout = new javax.swing.GroupLayout(jPanelGraficas);
        jPanelGraficas.setLayout(jPanelGraficasLayout);
        jPanelGraficasLayout.setHorizontalGroup(
            jPanelGraficasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 426, Short.MAX_VALUE)
        );
        jPanelGraficasLayout.setVerticalGroup(
            jPanelGraficasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 287, Short.MAX_VALUE)
        );

        btnEjecutar.setBackground(new java.awt.Color(255, 255, 204));
        btnEjecutar.setFont(new java.awt.Font("Lucida Sans", 1, 14)); // NOI18N
        btnEjecutar.setForeground(new java.awt.Color(0, 0, 0));
        btnEjecutar.setText("Ejecutar");
        btnEjecutar.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        btnEjecutar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEjecutarActionPerformed(evt);
            }
        });

        btnReportes.setBackground(new java.awt.Color(255, 255, 204));
        btnReportes.setFont(new java.awt.Font("Lucida Sans", 1, 12)); // NOI18N
        btnReportes.setForeground(new java.awt.Color(0, 0, 0));
        btnReportes.setText("Reportes");
        btnReportes.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanelPrincipalLayout = new javax.swing.GroupLayout(jPanelPrincipal);
        jPanelPrincipal.setLayout(jPanelPrincipalLayout);
        jPanelPrincipalLayout.setHorizontalGroup(
            jPanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPrincipalLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanelPrincipalLayout.createSequentialGroup()
                        .addGap(285, 285, 285)
                        .addComponent(btnEjecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(183, 183, 183)
                        .addComponent(btnReportes, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelPrincipalLayout.createSequentialGroup()
                        .addGroup(jPanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanelPrincipalLayout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addGap(192, 192, 192)
                                .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnAbrir, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTabbedPaneArchivos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jLabel1)))
                        .addGap(59, 59, 59)
                        .addGroup(jPanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanelGraficas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnVerGraficas))))
                .addContainerGap(21, Short.MAX_VALUE))
        );
        jPanelPrincipalLayout.setVerticalGroup(
            jPanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanelPrincipalLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(jPanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEjecutar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReportes, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(jPanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanelPrincipalLayout.createSequentialGroup()
                        .addComponent(btnVerGraficas)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPanelGraficas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanelPrincipalLayout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTabbedPaneArchivos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(jPanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanelPrincipalLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                    .addGroup(jPanelPrincipalLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanelPrincipalLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnNuevo, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAbrir, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanelPrincipal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        String tabName = JOptionPane.showInputDialog(null,"Asigne un nombre a la pestaña","Nueva Pestaña",JOptionPane.INFORMATION_MESSAGE);
        
        if(tabName!=null){
            JPanel panel = new JPanel();
            panel.add(new JLabel());

            panel.setLayout(new FlowLayout());

            JTextArea textArea = new JTextArea();
            textArea.setPreferredSize(new Dimension(424, 285));

                textArea.setEditable(true);
            panel.add(new JScrollPane(textArea));

            jTabbedPaneArchivos.addTab(tabName, panel);

            getContentPane().revalidate();
            getContentPane().repaint();
        }
         
    }//GEN-LAST:event_btnNuevoActionPerformed

    private void jTabbedPaneArchivosMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTabbedPaneArchivosMousePressed
        if(SwingUtilities.isRightMouseButton(evt)){
            int index = jTabbedPaneArchivos.getSelectedIndex();
            JPopupMenu popupMenu = new JPopupMenu();
            JMenuItem delete = new JMenuItem("Eliminar");
            JMenuItem save = new JMenuItem("Guardar");

            delete.addActionListener(new ActionListener(){

                @Override
                public void actionPerformed(ActionEvent e){
                    jTabbedPaneArchivos.remove(index);
                }
            });
            
            save.addActionListener(new ActionListener(){

                @Override
                public void actionPerformed(ActionEvent e){
                   saveFile();
                }
            });

            popupMenu.add(delete);
            popupMenu.add(save);
            popupMenu.show(jTabbedPaneArchivos, evt.getX(),evt.getY()+10);
        }
        
    }//GEN-LAST:event_jTabbedPaneArchivosMousePressed

    private void btnAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAbrirActionPerformed
        JFileChooser chooser = new JFileChooser();
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Archivos .df", "df");
        chooser.setFileFilter(filter);

        int result = chooser.showOpenDialog(null);

        if (result == JFileChooser.APPROVE_OPTION) {
            File archivo = new File(chooser.getSelectedFile().getAbsolutePath());
            filePath = archivo.getAbsolutePath(); // Actualiza la variable filePath
            String fileName = archivo.getName();
            String tabName = obtenerNombrePestana(fileName);

            try {
                // Leer el contenido del archivo
                String content = new String(Files.readAllBytes(archivo.toPath()));

                // Crear un nuevo JTextArea para cada pestaña
                JTextArea textArea = new JTextArea();
                textArea.setPreferredSize(new Dimension(424, 285));
                textArea.setEditable(true);
                textArea.setText(content);

                // Crear un nuevo panel para la pestaña
                JPanel panel = new JPanel();
                panel.setLayout(new FlowLayout());
                panel.add(new JScrollPane(textArea));

                // Agregar la nueva pestaña al JTabbedPane
                jTabbedPaneArchivos.addTab(tabName, panel);

                // Actualizar el contenido del contenedor principal
                getContentPane().revalidate();
                getContentPane().repaint();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnAbrirActionPerformed

    private void btnEjecutarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEjecutarActionPerformed

        
       // Obtener el índice de la pestaña actual
        int index = jTabbedPaneArchivos.getSelectedIndex();
        int fila = 0;
        int columna = 0;

        // Verificar si hay alguna pestaña seleccionada
        if (index != -1) {
            // Obtener el panel de la pestaña actual
            JPanel panel = (JPanel) jTabbedPaneArchivos.getComponentAt(index);

            // Obtener el JTextArea dentro del panel
            Component[] components = panel.getComponents();
            for (Component component : components) {
                if (component instanceof JScrollPane) {
                    JScrollPane scrollPane = (JScrollPane) component;
                    Component viewportView = scrollPane.getViewport().getView();
                    if (viewportView instanceof JTextArea) {
                        JTextArea textArea = (JTextArea) viewportView;

                        // Obtener el contenido del JTextArea
                        String content = textArea.getText().toLowerCase();

                        // Crear un objeto File asociado a un archivo temporal
                        File archivo = new File("archivo_temporal.txt");

                        // Escribir el contenido del JTextArea en el archivo
                        try (PrintWriter escribir = new PrintWriter(archivo)) {
                            escribir.print(content);
                        } catch (FileNotFoundException ex) {
                            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        // Realizar el análisis léxico del archivo
                        try (Reader lector = new BufferedReader(new FileReader(archivo))) {
                            Lexer lexer = new Lexer(lector);
                            String resultado = "";

                            while (true) {
                                Tokens tokens = lexer.yylex();
                                if (tokens == null) {
                                    resultado += "FIN";
                                    // Mostrar el resultado en el JTextArea
                                    TextAreaConsola.setText("Texto analizado!");
                                    System.out.println(resultado);
                 
                                    return;
                                }

                                switch (tokens) {
                                    
                                    case ERROR:
                                        columna = lexer.lexeme.length();
                                        resultado +=  lexer.lexeme + " --<Error Lexico! || Fila :" + (fila + 1) + "|| Columna :" + + (columna) + ">\n";
                                        break;
                                    case Linea:
                                        //resultado += "LINEA\n";
                                        fila += 1;
                                        columna = 0;
                                        //System.out.println(fila);
                                        break;
                                    case Identificador:
                                        columna = lexer.lexeme.length();
                                        resultado +=  lexer.lexeme + " --<Identificador || Fila :" + (fila + 1) + "|| Columna :" + + (columna) + ">\n";
                                        break;
                                    case Numero:
                                        resultado +=  lexer.lexeme + " --<Numero en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Corchete_Izq:
                                        resultado +=  lexer.lexeme + " --<Corchete_Izq en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Corchete_Der:
                                        resultado +=  lexer.lexeme + " --<Corchete_Der en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Parentesis_Izq:
                                        resultado +=  lexer.lexeme + " --<Parentesis_Izq en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Parentesis_Der:
                                        resultado +=  lexer.lexeme + " --<Parentesis_Der en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Punto_Coma:
                                        resultado +=  lexer.lexeme + " --<Punto_Coma en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Dos_Puntos:
                                        resultado +=  lexer.lexeme + " --<Dos_Puntos en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Punto:
                                        resultado +=  lexer.lexeme + " --<Punto en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case DobleComilla_Izq:
                                        resultado +=  lexer.lexeme + " --<DobleComilla_Izq en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case DobleComilla_Der:
                                        resultado +=  lexer.lexeme + " --<DobleComilla_Der en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Coma:
                                        resultado +=  lexer.lexeme + " --<Coma en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Program_Inicio:
                                        resultado +=  lexer.lexeme + " --<Program_inicio en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case End:
                                        resultado +=  lexer.lexeme + " --<End en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Variable:
                                        resultado +=  lexer.lexeme + " --<Variable en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Fun_Double:
                                        resultado +=  lexer.lexeme + " --<Fun_Double en fila :" + (fila + 1) + ">\n";
                                        break;    
                                    case Fun_Cadena:
                                        resultado +=  lexer.lexeme + " --<Fun_Cadena en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Array:
                                        resultado +=  lexer.lexeme + " --<Array en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Fun_Suma:
                                        resultado +=  lexer.lexeme + " --<Fun_Suma en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Fun_Resta:
                                        resultado +=  lexer.lexeme + " --<Fun_Resta en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Fun_Multiplicacion:
                                        resultado +=  lexer.lexeme + " --<Fun_Multiplicacion en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Fun_Division:
                                        resultado +=  lexer.lexeme + " --<Fun_Division en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Fun_Mod:
                                        resultado +=  lexer.lexeme + " --<Fun_Mod en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Fun_Media:
                                        resultado +=  lexer.lexeme + " --<Fun_Media en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Fun_Mediana:
                                        resultado +=  lexer.lexeme + " --<Fun_Mediana en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Fun_Moda:
                                        resultado +=  lexer.lexeme + " --<Fun_Moda en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Fun_Varianza:
                                        resultado +=  lexer.lexeme + " --<Fun_Varianza en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Fun_Minimo:
                                        resultado +=  lexer.lexeme + " --<Fun_Minimo en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Fun_Maximo:
                                        resultado +=  lexer.lexeme + " --<Fun_Maximo en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Consola:
                                        resultado +=  lexer.lexeme + " --<Consola en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Imprimir:
                                        resultado +=  lexer.lexeme + " --<Imprimir en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Columna:
                                        resultado +=  lexer.lexeme + " --<Columna en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Ejecutar:
                                        resultado +=  lexer.lexeme + " --<Ejecutar en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Grafica_Barras:
                                        resultado +=  lexer.lexeme + " --<Grafica_Barras en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Grafica_Titulo:
                                        resultado +=  lexer.lexeme + " --<Grafica_Titulo en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Eje_X:
                                        resultado +=  lexer.lexeme + " --<Eje_X en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Eje_Y:
                                        resultado +=  lexer.lexeme + " --<Eje_Y en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Titulo_X:
                                        resultado +=  lexer.lexeme + " --<Titulo_X en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Titulo_Y:
                                        resultado +=  lexer.lexeme + " --<Titulo_Y en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Grafica_Pie:
                                        resultado +=  lexer.lexeme + " --<Grafica_Pie en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Grafica_Label:
                                        resultado +=  lexer.lexeme + " --<Grafica_Label en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Grafica_Valores:
                                        resultado +=  lexer.lexeme + " --<--<Grafica_Valores en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Grafica_Lineal:
                                        resultado +=  lexer.lexeme + " --<Grafica_Lineal en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Grafica_Histograma:
                                        resultado +=  lexer.lexeme + " --<Grafica_Histograma en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case DosPuntos_Dobles:
                                        resultado +=  lexer.lexeme + " --<DosPuntos_Dobles en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Signo_Igual:
                                        resultado +=  lexer.lexeme + " --<Signo_Igual en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Signo_Suma:
                                        resultado +=  lexer.lexeme + " --<Signo_Suma en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Signo_Resta:
                                        resultado +=  lexer.lexeme + " --<Signo_Resta en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Signo_Multiplicacion:
                                        resultado +=  lexer.lexeme + " --<Signo_Multiplicacion en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Signo_Division:
                                        resultado +=  lexer.lexeme + " --<Signo_Division en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Signo_Indicador:
                                        resultado +=  lexer.lexeme + " --<Signo_Indicador en fila :" + (fila + 1) + ">\n";
                                        break;
                                    case Signo_Arroba:
                                        resultado +=  lexer.lexeme + " --<Signo_Arroba en fila :" + (fila + 1) + ">\n";
                                        break;
                                    default:
                                        resultado += lexer.lexeme + " -> Es " + tokens + "\n";
                                        break;
                                }
                            }
                        } catch (FileNotFoundException ex) {
                            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                        } catch (IOException ex) {
                            Logger.getLogger(FrmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        break;
                    }
                }
            }
        } else {
            // Si no hay ninguna pestaña seleccionada, mostrar un mensaje en la consola
            System.out.println("No hay ninguna pestaña seleccionada");
        }
    }//GEN-LAST:event_btnEjecutarActionPerformed

    private void saveFile() {
           int index = jTabbedPaneArchivos.getSelectedIndex();

        if (index != -1) {
            // Obtener el panel de la pestaña actual
            JPanel panel = (JPanel) jTabbedPaneArchivos.getComponentAt(index);

            // Obtener el JTextArea dentro del panel
            Component[] components = panel.getComponents();
            for (Component component : components) {
                if (component instanceof JScrollPane) {
                    JScrollPane scrollPane = (JScrollPane) component;
                    Component viewportView = scrollPane.getViewport().getView();
                    if (viewportView instanceof JTextArea) {
                        JTextArea textArea = (JTextArea) viewportView;

                        // Obtener el contenido del JTextArea
                        String content = textArea.getText();

                        // Obtener la ruta del archivo asociado a la pestaña actual
                        String filePath = getFilePathForTab();

                        if (filePath != null) {
                            try {
                                File file = new File(filePath);
                                BufferedWriter writer = new BufferedWriter(new FileWriter(file));
                                writer.write(content);
                                writer.close();
                                JOptionPane.showMessageDialog(null, "Archivo guardado exitosamente.", "Guardado", JOptionPane.INFORMATION_MESSAGE);
                            } catch (IOException e) {
                                e.printStackTrace();
                                JOptionPane.showMessageDialog(null, "Error al guardar el archivo.", "Error", JOptionPane.ERROR_MESSAGE);
                            }
                        } else {
                            // Manejar el caso en el que no se pueda obtener la ruta del archivo
                            JOptionPane.showMessageDialog(null, "No se pudo obtener la ruta del archivo.", "Error", JOptionPane.ERROR_MESSAGE);
                        }

                        break; // Salir del bucle después de encontrar el JTextArea
                    }
                }
            }
        }
    }
    
    private String getFilePathForTab() {
        int index = jTabbedPaneArchivos.getSelectedIndex();

        if (index != -1) {
            // Obtener el nombre de la pestaña actual
            String tabName = jTabbedPaneArchivos.getTitleAt(index);

            // Suponemos que el nombre de la pestaña es el mismo que el nombre del archivo sin extensión
            String fileNameWithoutExtension = tabName;

            // Construir la ruta completa del archivo
            String filePath = "C:\\Users\\lenovo\\Documents\\" + fileNameWithoutExtension + ".df" ;
            return filePath;
        }

        // Retornar null si no hay pestaña seleccionada
        return null;
    }
    
    private String obtenerNombrePestana(String fileName) {
        // Buscar el último punto en el nombre del archivo
        int lastIndex = fileName.lastIndexOf('.');

        // Obtener el nombre de la pestaña (sin extensión)
        String tabName;
        if (lastIndex != -1) {
            tabName = fileName.substring(0, lastIndex);
        } else {
            tabName = fileName;
        }

        return tabName;
    }
    
    public static void clearScreen() {
    for (int i = 0; i < 50; i++) {
        System.out.println();  // Imprimir líneas en blanco
    }
}
    
    
//    public static void clearScreen() {  
//        System.out.print("\033[H\033[2J");  
//        System.out.flush();  
//    }  


    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
        * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
       */
//        try {
//            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//                if ("Nimbus".equals(info.getName())) {
//                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
//                    break;
//                }
//            }
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(FrmPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
               new FrmPrincipal().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea TextAreaConsola;
    private javax.swing.JButton btnAbrir;
    private javax.swing.JButton btnEjecutar;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnReportes;
    private javax.swing.JButton btnVerGraficas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanelGraficas;
    private javax.swing.JPanel jPanelPrincipal;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane jTabbedPaneArchivos;
    private javax.swing.JTextArea txtEditor;
    // End of variables declaration//GEN-END:variables
}
