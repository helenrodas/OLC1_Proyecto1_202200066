
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package DataForge;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\047\000\002\002\004\000\002\002\006\000\002\003" +
    "\003\000\002\003\002\000\002\004\003\000\002\004\004" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\006\013\000\002" +
    "\012\003\000\002\012\003\000\002\012\003\000\002\012" +
    "\004\000\002\012\010\000\002\012\006\000\002\012\003" +
    "\000\002\007\014\000\002\014\005\000\002\014\003\000" +
    "\002\013\005\000\002\013\003\000\002\010\005\000\002" +
    "\016\007\000\002\016\011\000\002\015\003\000\002\015" +
    "\005\000\002\011\014\000\002\020\004\000\002\020\003" +
    "\000\002\021\011\000\002\021\011\000\002\021\011\000" +
    "\002\021\011\000\002\021\011\000\002\021\011\000\002" +
    "\021\011" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\004\016\004\001\002\000\016\003\021\017" +
    "\ufffe\020\010\022\013\025\015\031\014\001\002\000\004" +
    "\002\006\001\002\000\004\002\001\001\002\000\016\003" +
    "\ufffa\017\ufffa\020\ufffa\022\ufffa\025\ufffa\031\ufffa\001\002" +
    "\000\004\043\204\001\002\000\016\003\ufffd\017\ufffd\020" +
    "\ufffd\022\ufffd\025\ufffd\031\ufffd\001\002\000\016\003\ufff9" +
    "\017\ufff9\020\ufff9\022\ufff9\025\ufff9\031\ufff9\001\002\000" +
    "\004\043\173\001\002\000\004\012\077\001\002\000\004" +
    "\041\026\001\002\000\004\017\024\001\002\000\016\003" +
    "\ufffb\017\ufffb\020\ufffb\022\ufffb\025\ufffb\031\ufffb\001\002" +
    "\000\016\003\021\017\uffff\020\010\022\013\025\015\031" +
    "\014\001\002\000\016\003\ufff7\017\ufff7\020\ufff7\022\ufff7" +
    "\025\ufff7\031\ufff7\001\002\000\016\003\ufff8\017\ufff8\020" +
    "\ufff8\022\ufff8\025\ufff8\031\ufff8\001\002\000\016\003\ufffc" +
    "\017\ufffc\020\ufffc\022\ufffc\025\ufffc\031\ufffc\001\002\000" +
    "\004\016\025\001\002\000\004\002\000\001\002\000\006" +
    "\026\027\027\031\001\002\000\004\005\073\001\002\000" +
    "\016\003\uffe9\017\uffe9\020\uffe9\022\uffe9\025\uffe9\031\uffe9" +
    "\001\002\000\004\005\032\001\002\000\020\003\037\023" +
    "\034\024\041\047\035\050\036\051\033\053\042\001\002" +
    "\000\014\013\ufff3\015\ufff3\017\ufff3\045\ufff3\054\ufff3\001" +
    "\002\000\004\012\066\001\002\000\004\050\065\001\002" +
    "\000\014\013\ufff5\015\ufff5\017\ufff5\045\ufff5\054\ufff5\001" +
    "\002\000\014\013\uffef\015\uffef\017\uffef\045\uffef\054\uffef" +
    "\001\002\000\006\045\050\054\055\001\002\000\004\012" +
    "\044\001\002\000\014\013\ufff4\015\ufff4\017\ufff4\045\ufff4" +
    "\054\ufff4\001\002\000\014\013\uffec\015\uffec\017\uffec\045" +
    "\uffec\054\uffec\001\002\000\022\003\037\014\046\023\034" +
    "\024\041\047\035\050\036\051\033\053\042\001\002\000" +
    "\004\013\054\001\002\000\020\003\037\023\034\024\041" +
    "\047\035\050\036\051\033\053\042\001\002\000\010\013" +
    "\uffea\017\uffea\045\050\001\002\000\020\003\037\023\034" +
    "\024\041\047\035\050\036\051\033\053\042\001\002\000" +
    "\014\013\uffed\015\uffed\017\uffed\045\uffed\054\uffed\001\002" +
    "\000\006\015\053\045\050\001\002\000\006\013\uffeb\017" +
    "\uffeb\001\002\000\014\013\ufff0\015\ufff0\017\ufff0\045\ufff0" +
    "\054\ufff0\001\002\000\022\003\037\014\057\023\034\024" +
    "\041\047\035\050\036\051\033\053\042\001\002\000\004" +
    "\017\063\001\002\000\020\003\037\023\034\024\041\047" +
    "\035\050\036\051\033\053\042\001\002\000\006\017\uffe6" +
    "\045\050\001\002\000\006\015\062\045\050\001\002\000" +
    "\004\017\uffe5\001\002\000\004\042\064\001\002\000\016" +
    "\003\uffe7\017\uffe7\020\uffe7\022\uffe7\025\uffe7\031\uffe7\001" +
    "\002\000\014\013\ufff2\015\ufff2\017\ufff2\045\ufff2\054\ufff2" +
    "\001\002\000\020\003\037\023\034\024\041\047\035\050" +
    "\036\051\033\053\042\001\002\000\004\045\070\001\002" +
    "\000\020\003\037\023\034\024\041\047\035\050\036\051" +
    "\033\053\042\001\002\000\004\013\072\001\002\000\014" +
    "\013\ufff1\015\ufff1\017\ufff1\045\ufff1\054\ufff1\001\002\000" +
    "\020\003\037\023\034\024\041\047\035\050\036\051\033" +
    "\053\042\001\002\000\006\017\075\045\050\001\002\000" +
    "\004\042\076\001\002\000\016\003\uffe8\017\uffe8\020\uffe8" +
    "\022\uffe8\025\uffe8\031\uffe8\001\002\000\020\032\104\033" +
    "\103\034\101\035\105\036\102\037\110\040\107\001\002" +
    "\000\022\030\uffe2\032\uffe2\033\uffe2\034\uffe2\035\uffe2\036" +
    "\uffe2\037\uffe2\040\uffe2\001\002\000\004\041\165\001\002" +
    "\000\004\041\157\001\002\000\004\041\151\001\002\000" +
    "\004\041\143\001\002\000\004\041\135\001\002\000\022" +
    "\030\126\032\104\033\103\034\101\035\105\036\102\037" +
    "\110\040\107\001\002\000\004\041\117\001\002\000\004" +
    "\041\111\001\002\000\004\021\112\001\002\000\004\005" +
    "\113\001\002\000\022\003\037\014\046\023\034\024\041" +
    "\047\035\050\036\051\033\053\042\001\002\000\004\017" +
    "\115\001\002\000\004\042\116\001\002\000\022\030\uffdc" +
    "\032\uffdc\033\uffdc\034\uffdc\035\uffdc\036\uffdc\037\uffdc\040" +
    "\uffdc\001\002\000\004\021\120\001\002\000\004\005\121" +
    "\001\002\000\022\003\037\014\046\023\034\024\041\047" +
    "\035\050\036\051\033\053\042\001\002\000\004\017\123" +
    "\001\002\000\004\042\124\001\002\000\022\030\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\035\uffdb\036\uffdb\037\uffdb\040\uffdb" +
    "\001\002\000\022\030\uffe3\032\uffe3\033\uffe3\034\uffe3\035" +
    "\uffe3\036\uffe3\037\uffe3\040\uffe3\001\002\000\004\031\127" +
    "\001\002\000\004\017\130\001\002\000\004\042\131\001" +
    "\002\000\004\013\132\001\002\000\004\017\133\001\002" +
    "\000\004\042\134\001\002\000\016\003\uffe4\017\uffe4\020" +
    "\uffe4\022\uffe4\025\uffe4\031\uffe4\001\002\000\004\021\136" +
    "\001\002\000\004\005\137\001\002\000\004\051\140\001" +
    "\002\000\004\017\141\001\002\000\004\042\142\001\002" +
    "\000\022\030\uffde\032\uffde\033\uffde\034\uffde\035\uffde\036" +
    "\uffde\037\uffde\040\uffde\001\002\000\004\021\144\001\002" +
    "\000\004\005\145\001\002\000\004\051\146\001\002\000" +
    "\004\017\147\001\002\000\004\042\150\001\002\000\022" +
    "\030\uffe1\032\uffe1\033\uffe1\034\uffe1\035\uffe1\036\uffe1\037" +
    "\uffe1\040\uffe1\001\002\000\004\021\152\001\002\000\004" +
    "\005\153\001\002\000\022\003\037\014\046\023\034\024" +
    "\041\047\035\050\036\051\033\053\042\001\002\000\004" +
    "\017\155\001\002\000\004\042\156\001\002\000\022\030" +
    "\uffe0\032\uffe0\033\uffe0\034\uffe0\035\uffe0\036\uffe0\037\uffe0" +
    "\040\uffe0\001\002\000\004\021\160\001\002\000\004\005" +
    "\161\001\002\000\004\051\162\001\002\000\004\017\163" +
    "\001\002\000\004\042\164\001\002\000\022\030\uffdd\032" +
    "\uffdd\033\uffdd\034\uffdd\035\uffdd\036\uffdd\037\uffdd\040\uffdd" +
    "\001\002\000\004\021\166\001\002\000\004\005\167\001" +
    "\002\000\022\003\037\014\046\023\034\024\041\047\035" +
    "\050\036\051\033\053\042\001\002\000\004\017\171\001" +
    "\002\000\004\042\172\001\002\000\022\030\uffdf\032\uffdf" +
    "\033\uffdf\034\uffdf\035\uffdf\036\uffdf\037\uffdf\040\uffdf\001" +
    "\002\000\004\021\174\001\002\000\004\041\175\001\002" +
    "\000\004\047\176\001\002\000\004\050\177\001\002\000" +
    "\004\046\200\001\002\000\022\003\037\014\046\023\034" +
    "\024\041\047\035\050\036\051\033\053\042\001\002\000" +
    "\004\017\202\001\002\000\004\042\203\001\002\000\016" +
    "\003\uffee\017\uffee\020\uffee\022\uffee\025\uffee\031\uffee\001" +
    "\002\000\004\021\205\001\002\000\004\041\206\001\002" +
    "\000\004\050\207\001\002\000\004\046\210\001\002\000" +
    "\020\003\037\023\034\024\041\047\035\050\036\051\033" +
    "\053\042\001\002\000\004\017\212\001\002\000\004\042" +
    "\213\001\002\000\016\003\ufff6\017\ufff6\020\ufff6\022\ufff6" +
    "\025\ufff6\031\ufff6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\211\000\004\002\004\001\001\000\020\003\015\004" +
    "\017\005\010\006\016\007\006\010\011\011\021\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\022\006\016\007\006" +
    "\010\011\011\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\016\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\042\014\037\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\012" +
    "\042\013\044\014\046\001\001\000\002\001\001\000\006" +
    "\012\042\014\051\001\001\000\002\001\001\000\004\012" +
    "\050\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\042\014\057\015" +
    "\055\001\001\000\002\001\001\000\006\012\042\014\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\066\001\001\000\002\001\001\000\004\012" +
    "\070\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\042\014\073\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\020\105\021\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\021\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\012\042\013\113" +
    "\014\046\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\042\013\121\014\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\012\042\013\153\014\046\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\042\013\167\014" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\042" +
    "\013\200\014\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\210\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.out.println("Error sintactico: "+s.value+" linea: "+s.left+" columna: "+s.right);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico unrecovered: "+s.value+" linea: "+s.left+" columna: "+s.right);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO_PR EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arbol start_val = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO_PR ::= Program CODIGO End Program 
            {
              arbol RESULT =null;
		int P1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int P1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object P1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol C = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int P2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int P2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object P2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                arbol inicio = new arbol("INICIO_PR");
                inicio.addHijo(new arbol(P1.toString()));
                inicio.addHijo(C);
                inicio.addHijo(new arbol(E.toString()));
                inicio.addHijo(new arbol(P2.toString()));
                RESULT = inicio;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_PR",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CODIGO ::= EJECUCION 
            {
              arbol RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol E = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                arbol codigo = new arbol("CODIGO");
                codigo.addHijo(E);
                RESULT = codigo;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CODIGO ::= 
            {
              arbol RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EJECUCION ::= INSTRUCCION 
            {
              arbol RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol I = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                arbol ejecucion = new arbol("EJECUCION");
                ejecucion.addHijo(I);
                RESULT = ejecucion;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EJECUCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EJECUCION ::= EJECUCION INSTRUCCION 
            {
              arbol RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arbol E = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol I = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                arbol ejecucion = new arbol("EJECUCION");
                ejecucion.addHijo(E);
                ejecucion.addHijo(I);
                RESULT = ejecucion;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EJECUCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= D_VARIABLE 
            {
              arbol RESULT =null;
		int Vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol V = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                arbol instruccion = new arbol("INSTRUCCION");
                instruccion.addHijo(V);
                RESULT = instruccion;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= D_ARREGLO 
            {
              arbol RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol A = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            
                arbol instruccion = new arbol("INSTRUCCION");
                instruccion.addHijo(A);
                RESULT = instruccion;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= D_COMENTARIO 
            {
              arbol RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol C = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            
                arbol instruccion = new arbol("INSTRUCCION");
                instruccion.addHijo(C);
                RESULT = instruccion;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= D_GRAFICA 
            {
              arbol RESULT =null;
		int Gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol G = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            
                arbol instruccion = new arbol("INSTRUCCION");
                instruccion.addHijo(G);
                RESULT = instruccion;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= error 
            {
              arbol RESULT =null;
		
                 arbol instruccion = new arbol("INSTRUCCION");
                 RESULT = instruccion;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // D_VARIABLE ::= Variable Dos_Puntos Var_Tipo DosPuntos_Dobles Identificador Signo_Indicador TIPOEXPR End Punto_Coma 
            {
              arbol RESULT =null;
		int Vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int Vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object V = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int Tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object T = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int DDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int DDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object DD = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object S = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int EXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int EXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol EX = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int PCleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int PCright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object PC = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  

            arbol D_variable = new arbol("D_VARIABLE");
            D_variable.addHijo(new arbol(V.toString()));
            D_variable.addHijo(new arbol(D.toString()));
            D_variable.addHijo(new arbol(T.toString()));
            D_variable.addHijo(new arbol(DD.toString()));
            D_variable.addHijo(new arbol(I.toString()));
            D_variable.addHijo(new arbol(S.toString()));
            D_variable.addHijo(EX);
            D_variable.addHijo(new arbol(E.toString()));
            D_variable.addHijo(new arbol(PC.toString()));
            RESULT = D_variable;
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("D_VARIABLE",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPOEXPR ::= Identificador 
            {
              arbol RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

            arbol tipoExpr = new arbol("TIPOEXPR");
            tipoExpr.addHijo(new arbol(I.toString()));
            RESULT = tipoExpr;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOEXPR",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPOEXPR ::= Numero 
            {
              arbol RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object N = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

            arbol tipoExpr = new arbol("TIPOEXPR");
            tipoExpr.addHijo(new arbol(N.toString()));
            RESULT = tipoExpr;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOEXPR",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPOEXPR ::= Char_General 
            {
              arbol RESULT =null;
		int CGleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int CGright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object CG = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

            arbol tipoExpr = new arbol("TIPOEXPR");
            tipoExpr.addHijo(new arbol(CG.toString()));
            RESULT = tipoExpr;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOEXPR",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPOEXPR ::= Signo_Arroba Identificador 
            {
              arbol RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int I2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int I2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object I2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

            arbol tipoExpr = new arbol("TIPOEXPR");
            tipoExpr.addHijo(new arbol(A.toString()));
            tipoExpr.addHijo(new arbol(I2.toString()));
            RESULT = tipoExpr;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOEXPR",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPOEXPR ::= Fun_Arit Parentesis_Izq TIPOEXPR Coma TIPOEXPR Parentesis_Der 
            {
              arbol RESULT =null;
		int FAleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int FAright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object FA = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int PIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int PIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object PI = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int E1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		arbol E1 = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arbol E2 = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int PDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int PDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object PD = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

            arbol tipoExpr = new arbol("TIPOEXPR");
            tipoExpr.addHijo(new arbol(FA.toString()));
            tipoExpr.addHijo(new arbol(PI.toString()));
            tipoExpr.addHijo(E1);
            tipoExpr.addHijo(new arbol(C.toString()));
            tipoExpr.addHijo(E2);
            tipoExpr.addHijo(new arbol(PD.toString()));
            RESULT = tipoExpr;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOEXPR",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // TIPOEXPR ::= Fun_Esta Parentesis_Izq EXPRE_EST Parentesis_Der 
            {
              arbol RESULT =null;
		int FEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int FEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object FE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int PIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int PIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object PI = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int EEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int EEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arbol EE = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int PDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int PDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object PD = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

            arbol tipoExpr = new arbol("TIPOEXPR");
            tipoExpr.addHijo(new arbol(FE.toString()));
            tipoExpr.addHijo(new arbol(PI.toString()));
            tipoExpr.addHijo(EE);
            tipoExpr.addHijo(new arbol(PD.toString()));
            RESULT = tipoExpr;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOEXPR",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // TIPOEXPR ::= error 
            {
              arbol RESULT =null;
		
            arbol tipoExpr = new arbol("TIPOEXPR");
            RESULT = tipoExpr;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOEXPR",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // D_ARREGLO ::= Array Dos_Puntos Var_Tipo DosPuntos_Dobles Signo_Arroba Identificador Signo_Indicador EXPRE_EST End Punto_Coma 
            {
              arbol RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int DPleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int DPright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object DP = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int Vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int Vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object V = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int DDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int DDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object DD = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int SAleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int SAright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object SA = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object S = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int LDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol LD = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int PCleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int PCright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object PC = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

            arbol D_arreglo = new arbol("D_ARREGLO");
            D_arreglo.addHijo(new arbol(A.toString()));
            D_arreglo.addHijo(new arbol(DP.toString()));
            D_arreglo.addHijo(new arbol(V.toString()));
            D_arreglo.addHijo(new arbol(DD.toString()));
            D_arreglo.addHijo(new arbol(SA.toString()));
            D_arreglo.addHijo(new arbol(I.toString()));
            D_arreglo.addHijo(new arbol(S.toString()));
            D_arreglo.addHijo(LD);
            D_arreglo.addHijo(new arbol(E.toString()));
            D_arreglo.addHijo(new arbol(PC.toString()));
            RESULT = D_arreglo;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("D_ARREGLO",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LISTA_DATOS ::= LISTA_DATOS Coma TIPOEXPR 
            {
              arbol RESULT =null;
		int LDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol LD = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int TEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int TEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol TE = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                
                arbol ListaDatos = new arbol("LISTA_DATOS");
                ListaDatos.addHijo(LD);
                ListaDatos.addHijo(new arbol(C.toString()));
                ListaDatos.addHijo(TE);
                RESULT = ListaDatos;    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_DATOS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LISTA_DATOS ::= TIPOEXPR 
            {
              arbol RESULT =null;
		int TEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int TEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol TE = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                arbol ListaDatos = new arbol("LISTA_DATOS");
                ListaDatos.addHijo(TE);
                RESULT = ListaDatos;   
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_DATOS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRE_EST ::= Corchete_Izq LISTA_DATOS Corchete_Der 
            {
              arbol RESULT =null;
		int PIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int PIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object PI = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int LDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int LDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arbol LD = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int PDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int PDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object PD = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            
            arbol ExpreEst = new arbol("EXPRE_EST");
            ExpreEst.addHijo(new arbol(PI.toString()));
            ExpreEst.addHijo(LD);
            ExpreEst.addHijo(new arbol(PD.toString()));
            RESULT = ExpreEst;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRE_EST",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRE_EST ::= LISTA_DATOS 
            {
              arbol RESULT =null;
		int LDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int LDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol LD = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            arbol ExpreEst = new arbol("EXPRE_EST");
            ExpreEst.addHijo(LD);
            RESULT = ExpreEst;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRE_EST",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // D_COMENTARIO ::= Fun_Consola DosPuntos_Dobles LISTA_COMENTARIO 
            {
              arbol RESULT =null;
		int FCleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int FCright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object FC = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int LCleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int LCright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol LC = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

            arbol D_comentario = new arbol("D_COMENTARIO");
            D_comentario.addHijo(new arbol(FC.toString()));
            D_comentario.addHijo(LC);
            RESULT = D_comentario;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("D_COMENTARIO",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTA_COMENTARIO ::= Imprimir Signo_Igual LISTA_DATOS End Punto_Coma 
            {
              arbol RESULT =null;
		int IMleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int IMright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object IM = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int SIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int SIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object SI = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int LDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol LD = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int PCleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int PCright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object PC = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                    
                arbol listaComentario = new arbol("LISTA_COMENTARIO");
                listaComentario.addHijo(new arbol(IM.toString()));
                listaComentario.addHijo(new arbol(SI.toString()));
                listaComentario.addHijo(LD);
                listaComentario.addHijo(new arbol(E.toString()));
                listaComentario.addHijo(new arbol(PC.toString()));
                RESULT = listaComentario;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_COMENTARIO",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA_COMENTARIO ::= Columna Signo_Igual LISTA_DATOS Signo_IndicadorR TIPOARRAY End Punto_Coma 
            {
              arbol RESULT =null;
		int CLleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int CLright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object CL = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int SIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int SIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object SI = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int LDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int LDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		arbol LD = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int SIRleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int SIRright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object SIR = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int TAleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int TAright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol TA = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int PCleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int PCright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object PC = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                arbol listaComentario = new arbol("LISTA_COMENTARIO");
                listaComentario.addHijo(new arbol(CL.toString()));
                listaComentario.addHijo(new arbol(SI.toString()));
                listaComentario.addHijo(LD);
                listaComentario.addHijo(new arbol(SIR.toString()));
                listaComentario.addHijo(TA);
                listaComentario.addHijo(new arbol(E.toString()));
                listaComentario.addHijo(new arbol(PC.toString()));
                RESULT = listaComentario;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_COMENTARIO",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TIPOARRAY ::= LISTA_DATOS 
            {
              arbol RESULT =null;
		int LDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int LDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol LD = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

            arbol tipoArray = new arbol("TIPOARRAY");
            tipoArray.addHijo(LD);
            RESULT = tipoArray; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOARRAY",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // TIPOARRAY ::= Corchete_Izq LISTA_DATOS Corchete_Der 
            {
              arbol RESULT =null;
		int CIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int CIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object CI = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int LDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int LDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arbol LD = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int CDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int CDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object CD = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

            arbol tipoArray = new arbol("TIPOARRAY");
            tipoArray.addHijo(new arbol(CI.toString()));
            tipoArray.addHijo(LD);
            tipoArray.addHijo(new arbol(CD.toString()));
            RESULT = tipoArray; 
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOARRAY",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // D_GRAFICA ::= Tipo_Grafica Parentesis_Izq CONTGRAPH Ejecutar Tipo_Grafica End Punto_Coma Parentesis_Der End Punto_Coma 
            {
              arbol RESULT =null;
		int TG1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int TG1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object TG1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int PIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int PIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object PI = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int CGleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int CGright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		arbol CG = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int EJleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int EJright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object EJ = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int TG2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int TG2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object TG2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int E1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object E1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int PC1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int PC1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object PC1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int PDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int PDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object PD = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object E2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int PC2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int PC2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object PC2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

            arbol D_grafica = new arbol("D_GRAFICA");
            D_grafica.addHijo(new arbol(TG1.toString()));
            D_grafica.addHijo(new arbol(PI.toString()));
            D_grafica.addHijo(CG);
            D_grafica.addHijo(new arbol(EJ.toString()));
            D_grafica.addHijo(new arbol(TG2.toString()));
            D_grafica.addHijo(new arbol(E1.toString()));
            D_grafica.addHijo(new arbol(PC1.toString()));
            D_grafica.addHijo(new arbol(PD.toString()));
            D_grafica.addHijo(new arbol(E2.toString()));
            D_grafica.addHijo(new arbol(PC2.toString()));
            RESULT = D_grafica;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("D_GRAFICA",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CONTGRAPH ::= CONTGRAPH ATRIBUTOS 
            {
              arbol RESULT =null;
		int CONTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int CONTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arbol CONT = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ATRIBleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ATRIBright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol ATRIB = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

            arbol contgraph = new arbol("CONTGRAPH");
            contgraph.addHijo(CONT);
            contgraph.addHijo(ATRIB);
            RESULT = contgraph;     
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTGRAPH",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CONTGRAPH ::= ATRIBUTOS 
            {
              arbol RESULT =null;
		int ATRIBleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int ATRIBright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol ATRIB = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

            arbol contgraph = new arbol("CONTGRAPH");
            contgraph.addHijo(ATRIB);
            RESULT = contgraph;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTGRAPH",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ATRIBUTOS ::= Titulo DosPuntos_Dobles Var_Tipo Signo_Igual Char_General End Punto_Coma 
            {
              arbol RESULT =null;
		int Tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object T = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int V1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object V1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int CTleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int CTright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object CT = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		

            arbol atributos = new arbol("ATRIBUTOS");
            atributos.addHijo(new arbol(T.toString()));
            atributos.addHijo(new arbol(V1.toString()));
            atributos.addHijo(new arbol(CT.toString()));
            RESULT = atributos;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ATRIBUTOS ::= Eje_X DosPuntos_Dobles Var_Tipo Signo_Igual EXPRE_EST End Punto_Coma 
            {
              arbol RESULT =null;
		int EJXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int EJXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object EJX = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object V2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int LISTAEJXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LISTAEJXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol LISTAEJX = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
        
                arbol atributos = new arbol("ATRIBUTOS");
                atributos.addHijo(new arbol(EJX.toString()));
                atributos.addHijo(new arbol(V2.toString()));
                atributos.addHijo(LISTAEJX);
                RESULT = atributos;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ATRIBUTOS ::= Eje_Y DosPuntos_Dobles Var_Tipo Signo_Igual EXPRE_EST End Punto_Coma 
            {
              arbol RESULT =null;
		int EJYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int EJYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object EJY = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int V3left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int V3right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object V3 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int LISTAEJYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LISTAEJYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol LISTAEJY = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		

                arbol atributos = new arbol("ATRIBUTOS");
                atributos.addHijo(new arbol(EJY.toString()));
                atributos.addHijo(new arbol(V3.toString()));
                atributos.addHijo(LISTAEJY);
                RESULT = atributos;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ATRIBUTOS ::= Titulo_X DosPuntos_Dobles Var_Tipo Signo_Igual Char_General End Punto_Coma 
            {
              arbol RESULT =null;
		int TXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int TXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object TX = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int V4left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int V4right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object V4 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int CHARXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int CHARXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object CHARX = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                
                arbol atributos = new arbol("ATRIBUTOS");
                atributos.addHijo(new arbol(TX.toString()));
                atributos.addHijo(new arbol(V4.toString()));
                atributos.addHijo(new arbol(CHARX.toString()));
                RESULT = atributos;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ATRIBUTOS ::= Titulo_Y DosPuntos_Dobles Var_Tipo Signo_Igual Char_General End Punto_Coma 
            {
              arbol RESULT =null;
		int TYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int TYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object TY = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int V5left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int V5right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object V5 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int CHARYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int CHARYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object CHARY = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                
                arbol atributos = new arbol("ATRIBUTOS");
                atributos.addHijo(new arbol(TY.toString()));
                atributos.addHijo(new arbol(V5.toString()));
                atributos.addHijo(new arbol(CHARY.toString()));
                RESULT = atributos;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ATRIBUTOS ::= Grafica_Label DosPuntos_Dobles Var_Tipo Signo_Igual EXPRE_EST End Punto_Coma 
            {
              arbol RESULT =null;
		int GLleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int GLright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object GL = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int V1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int V1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object V1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int LDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol LD = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		
                
                arbol atributos = new arbol("ATRIBUTOS");
                atributos.addHijo(new arbol(GL.toString()));
                atributos.addHijo(new arbol(V1.toString()));
                atributos.addHijo(LD);
                RESULT = atributos;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ATRIBUTOS ::= Grafica_Valores DosPuntos_Dobles Var_Tipo Signo_Igual EXPRE_EST End Punto_Coma 
            {
              arbol RESULT =null;
		int GVleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int GVright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object GV = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int V2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int V2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object V2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int VPleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int VPright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol VP = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		

                arbol atributos = new arbol("ATRIBUTOS");
                atributos.addHijo(new arbol(GV.toString()));
                atributos.addHijo(new arbol(V2.toString()));
                atributos.addHijo(VP);
                RESULT = atributos;
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ATRIBUTOS",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
