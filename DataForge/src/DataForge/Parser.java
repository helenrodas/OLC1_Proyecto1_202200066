
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package DataForge;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\046\000\002\002\004\000\002\002\006\000\002\003" +
    "\003\000\002\003\002\000\002\004\003\000\002\004\004" +
    "\000\002\005\003\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\006\013\000\002\012\003\000\002" +
    "\012\003\000\002\012\003\000\002\012\004\000\002\012" +
    "\010\000\002\012\006\000\002\007\016\000\002\015\005" +
    "\000\002\015\003\000\002\013\005\000\002\013\003\000" +
    "\002\014\005\000\002\014\003\000\002\010\005\000\002" +
    "\021\007\000\002\021\011\000\002\016\005\000\002\016" +
    "\003\000\002\020\003\000\002\022\003\000\002\022\003" +
    "\000\002\017\003\000\002\017\005\000\002\011\014\000" +
    "\002\024\051\000\002\024\033\000\002\024\022" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\004\016\004\001\002\000\014\017\ufffe\020" +
    "\010\022\013\025\014\031\015\001\002\000\004\002\006" +
    "\001\002\000\004\002\001\001\002\000\014\017\ufffa\020" +
    "\ufffa\022\ufffa\025\ufffa\031\ufffa\001\002\000\004\043\243" +
    "\001\002\000\014\017\ufffd\020\ufffd\022\ufffd\025\ufffd\031" +
    "\ufffd\001\002\000\014\017\ufff9\020\ufff9\022\ufff9\025\ufff9" +
    "\031\ufff9\001\002\000\004\043\230\001\002\000\004\041" +
    "\200\001\002\000\004\012\025\001\002\000\004\017\023" +
    "\001\002\000\014\017\ufffb\020\ufffb\022\ufffb\025\ufffb\031" +
    "\ufffb\001\002\000\014\017\uffff\020\010\022\013\025\014" +
    "\031\015\001\002\000\014\017\ufff8\020\ufff8\022\ufff8\025" +
    "\ufff8\031\ufff8\001\002\000\014\017\ufffc\020\ufffc\022\ufffc" +
    "\025\ufffc\031\ufffc\001\002\000\004\016\024\001\002\000" +
    "\004\002\000\001\002\000\006\032\026\037\030\001\002" +
    "\000\004\041\121\001\002\000\004\030\112\001\002\000" +
    "\004\041\031\001\002\000\004\021\032\001\002\000\004" +
    "\005\033\001\002\000\004\014\034\001\002\000\016\023" +
    "\044\024\040\047\037\050\043\052\042\054\035\001\002" +
    "\000\012\013\ufff5\015\ufff5\017\ufff5\045\ufff5\001\002\000" +
    "\010\015\uffee\017\uffee\045\uffee\001\002\000\004\050\111" +
    "\001\002\000\004\012\077\001\002\000\006\015\053\045" +
    "\052\001\002\000\012\013\ufff4\015\ufff4\017\ufff4\045\ufff4" +
    "\001\002\000\012\013\ufff6\015\ufff6\017\ufff6\045\ufff6\001" +
    "\002\000\004\012\045\001\002\000\016\023\044\024\040" +
    "\047\037\050\043\052\042\054\035\001\002\000\004\045" +
    "\047\001\002\000\016\023\044\024\040\047\037\050\043" +
    "\052\042\054\035\001\002\000\004\013\051\001\002\000" +
    "\012\013\ufff2\015\ufff2\017\ufff2\045\ufff2\001\002\000\016" +
    "\023\044\024\040\047\037\050\043\052\042\054\035\001" +
    "\002\000\004\017\054\001\002\000\004\042\055\001\002" +
    "\000\004\040\056\001\002\000\004\041\057\001\002\000" +
    "\004\021\060\001\002\000\004\005\061\001\002\000\004" +
    "\014\062\001\002\000\016\023\044\024\040\047\037\050" +
    "\043\052\042\054\035\001\002\000\006\015\064\045\052" +
    "\001\002\000\004\017\065\001\002\000\004\042\066\001" +
    "\002\000\004\032\067\001\002\000\004\041\070\001\002" +
    "\000\004\021\071\001\002\000\004\005\072\001\002\000" +
    "\004\052\073\001\002\000\004\017\074\001\002\000\004" +
    "\042\075\001\002\000\004\030\uffdd\001\002\000\010\015" +
    "\uffef\017\uffef\045\uffef\001\002\000\020\012\102\023\044" +
    "\024\040\047\037\050\043\052\042\054\035\001\002\000" +
    "\004\013\110\001\002\000\006\013\uffec\045\105\001\002" +
    "\000\016\023\044\024\040\047\037\050\043\052\042\054" +
    "\035\001\002\000\006\013\uffea\045\uffea\001\002\000\006" +
    "\013\106\045\105\001\002\000\016\023\044\024\040\047" +
    "\037\050\043\052\042\054\035\001\002\000\004\013\uffed" +
    "\001\002\000\006\013\uffeb\045\uffeb\001\002\000\012\013" +
    "\ufff1\015\ufff1\017\ufff1\045\ufff1\001\002\000\012\013\ufff3" +
    "\015\ufff3\017\ufff3\045\ufff3\001\002\000\004\031\113\001" +
    "\002\000\004\017\114\001\002\000\004\042\115\001\002" +
    "\000\004\013\116\001\002\000\004\017\117\001\002\000" +
    "\004\042\120\001\002\000\014\017\uffdf\020\uffdf\022\uffdf" +
    "\025\uffdf\031\uffdf\001\002\000\004\021\122\001\002\000" +
    "\004\005\123\001\002\000\004\052\124\001\002\000\004" +
    "\017\125\001\002\000\004\042\126\001\002\000\006\033" +
    "\127\040\130\001\002\000\004\041\141\001\002\000\004" +
    "\041\131\001\002\000\004\021\132\001\002\000\004\005" +
    "\133\001\002\000\004\014\134\001\002\000\016\023\044" +
    "\024\040\047\037\050\043\052\042\054\035\001\002\000" +
    "\006\015\136\045\052\001\002\000\004\017\137\001\002" +
    "\000\004\042\140\001\002\000\004\030\uffdc\001\002\000" +
    "\004\021\142\001\002\000\004\005\143\001\002\000\004" +
    "\014\144\001\002\000\016\023\044\024\040\047\037\050" +
    "\043\052\042\054\035\001\002\000\006\015\146\045\052" +
    "\001\002\000\004\017\147\001\002\000\004\042\150\001" +
    "\002\000\004\034\151\001\002\000\004\041\152\001\002" +
    "\000\004\021\153\001\002\000\004\005\154\001\002\000" +
    "\004\014\155\001\002\000\016\023\044\024\040\047\037" +
    "\050\043\052\042\054\035\001\002\000\006\015\157\045" +
    "\052\001\002\000\004\017\160\001\002\000\004\042\161" +
    "\001\002\000\004\035\162\001\002\000\004\041\163\001" +
    "\002\000\004\021\164\001\002\000\004\005\165\001\002" +
    "\000\004\052\166\001\002\000\004\017\167\001\002\000" +
    "\004\042\170\001\002\000\004\036\171\001\002\000\004" +
    "\041\172\001\002\000\004\021\173\001\002\000\004\005" +
    "\174\001\002\000\004\052\175\001\002\000\004\017\176" +
    "\001\002\000\004\042\177\001\002\000\004\030\uffde\001" +
    "\002\000\006\026\201\027\203\001\002\000\004\005\220" +
    "\001\002\000\014\017\uffe9\020\uffe9\022\uffe9\025\uffe9\031" +
    "\uffe9\001\002\000\004\005\204\001\002\000\006\050\206" +
    "\052\205\001\002\000\004\055\uffe3\001\002\000\004\055" +
    "\uffe2\001\002\000\004\055\210\001\002\000\020\014\212" +
    "\023\044\024\040\047\037\050\043\052\042\054\035\001" +
    "\002\000\004\017\216\001\002\000\016\023\044\024\040" +
    "\047\037\050\043\052\042\054\035\001\002\000\006\017" +
    "\uffe1\045\052\001\002\000\006\015\215\045\052\001\002" +
    "\000\004\017\uffe0\001\002\000\004\042\217\001\002\000" +
    "\014\017\uffe7\020\uffe7\022\uffe7\025\uffe7\031\uffe7\001\002" +
    "\000\016\023\044\024\040\047\037\050\043\052\042\054" +
    "\035\001\002\000\006\017\uffe5\045\uffe5\001\002\000\006" +
    "\017\225\045\224\001\002\000\006\017\uffe4\045\uffe4\001" +
    "\002\000\016\023\044\024\040\047\037\050\043\052\042" +
    "\054\035\001\002\000\004\042\226\001\002\000\014\017" +
    "\uffe8\020\uffe8\022\uffe8\025\uffe8\031\uffe8\001\002\000\006" +
    "\017\uffe6\045\uffe6\001\002\000\004\021\231\001\002\000" +
    "\004\041\232\001\002\000\004\047\233\001\002\000\004" +
    "\050\234\001\002\000\004\046\235\001\002\000\004\014" +
    "\236\001\002\000\016\023\044\024\040\047\037\050\043" +
    "\052\042\054\035\001\002\000\006\015\240\045\052\001" +
    "\002\000\004\017\241\001\002\000\004\042\242\001\002" +
    "\000\014\017\ufff0\020\ufff0\022\ufff0\025\ufff0\031\ufff0\001" +
    "\002\000\004\021\244\001\002\000\004\041\245\001\002" +
    "\000\004\050\246\001\002\000\004\046\247\001\002\000" +
    "\016\023\044\024\040\047\037\050\043\052\042\054\035" +
    "\001\002\000\004\017\251\001\002\000\004\042\252\001" +
    "\002\000\014\017\ufff7\020\ufff7\022\ufff7\025\ufff7\031\ufff7" +
    "\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\250\000\004\002\004\001\001\000\020\003\015\004" +
    "\017\005\010\006\016\007\006\010\011\011\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\005\021\006\016\007\006" +
    "\010\011\011\020\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\024\026" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\012\035\015\040\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\045\001\001\000\002\001\001\000\004" +
    "\012\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\075\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\035\015\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\012\102\013\077\014\100\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\012\102\014\103\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\106\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\012\035" +
    "\015\134\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\012\035\015\144\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\012\035\015\155" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\021\201" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\022\206\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\012\035\015\212\017" +
    "\210\001\001\000\002\001\001\000\006\012\035\015\213" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\222" +
    "\016\221\020\220\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\012\222\020\226\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\012" +
    "\035\015\236\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\012\247\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public void syntax_error(Symbol s){
        System.out.println("Error sintactico: "+s.value+" linea: "+s.left+" columna: "+s.right);
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        System.out.println("Error sintactico unrecovered: "+s.value+" linea: "+s.left+" columna: "+s.right);
    }
    double valor_total ;

    Variable newVar = new Variable();


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO_PR EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arbol start_val = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO_PR ::= Program CODIGO End Program 
            {
              arbol RESULT =null;
		int P1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int P1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object P1 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol C = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int P2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int P2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object P2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                arbol inicio = new arbol("INICIO_PR");
                inicio.addHijo(new arbol(P1.toString()));
                inicio.addHijo(C);
                inicio.addHijo(new arbol(E.toString()));
                inicio.addHijo(new arbol(P2.toString()));
                RESULT = inicio;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO_PR",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // CODIGO ::= EJECUCION 
            {
              arbol RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol E = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                arbol codigo = new arbol("CODIGO");
                codigo.addHijo(E);
                RESULT = codigo;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // CODIGO ::= 
            {
              arbol RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CODIGO",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // EJECUCION ::= INSTRUCCION 
            {
              arbol RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol I = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                arbol ejecucion = new arbol("EJECUCION");
                ejecucion.addHijo(I);
                RESULT = ejecucion;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EJECUCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // EJECUCION ::= EJECUCION INSTRUCCION 
            {
              arbol RESULT =null;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arbol E = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol I = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                arbol ejecucion = new arbol("EJECUCION");
                ejecucion.addHijo(E);
                ejecucion.addHijo(I);
                RESULT = ejecucion;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EJECUCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= D_VARIABLE 
            {
              arbol RESULT =null;
		int Vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol V = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

                arbol instruccion = new arbol("INSTRUCCION");
                instruccion.addHijo(V);
                RESULT = instruccion;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= D_ARREGLO 
            {
              arbol RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol A = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            
                arbol instruccion = new arbol("INSTRUCCION");
                instruccion.addHijo(A);
                RESULT = instruccion;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= D_COMENTARIO 
            {
              arbol RESULT =null;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol C = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            
                arbol instruccion = new arbol("INSTRUCCION");
                instruccion.addHijo(C);
                RESULT = instruccion;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= D_GRAFICA 
            {
              arbol RESULT =null;
		int Gleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Gright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol G = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            
                arbol instruccion = new arbol("INSTRUCCION");
                instruccion.addHijo(G);
                RESULT = instruccion;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // D_VARIABLE ::= Variable Dos_Puntos Var_Tipo DosPuntos_Dobles Identificador Signo_Indicador TIPOEXPR End Punto_Coma 
            {
              arbol RESULT =null;
		int Vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int Vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object V = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int Dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int Dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object D = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int Tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int Tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object T = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int DDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int DDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object DD = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object S = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int EXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int EXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol EX = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int PCleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int PCright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object PC = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  

            arbol D_variable = new arbol("D_VARIABLE");
            D_variable.addHijo(new arbol(V.toString()));
            D_variable.addHijo(new arbol(D.toString()));
            D_variable.addHijo(new arbol(T.toString()));
            D_variable.addHijo(new arbol(DD.toString()));
            D_variable.addHijo(new arbol(I.toString()));
            D_variable.addHijo(new arbol(S.toString()));
            D_variable.addHijo(EX);
            D_variable.addHijo(new arbol(E.toString()));
            D_variable.addHijo(new arbol(PC.toString()));
            RESULT = D_variable;
  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("D_VARIABLE",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TIPOEXPR ::= Identificador 
            {
              arbol RESULT =null;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

            arbol tipoExpr = new arbol("TIPOEXPR");
            tipoExpr.addHijo(new arbol(I.toString()));
            RESULT = tipoExpr;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOEXPR",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TIPOEXPR ::= Numero 
            {
              arbol RESULT =null;
		int Nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int Nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object N = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

            arbol tipoExpr = new arbol("TIPOEXPR");
            tipoExpr.addHijo(new arbol(N.toString()));
            RESULT = tipoExpr;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOEXPR",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // TIPOEXPR ::= Char_General 
            {
              arbol RESULT =null;
		int CGleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int CGright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object CG = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

            arbol tipoExpr = new arbol("TIPOEXPR");
            tipoExpr.addHijo(new arbol(CG.toString()));
            RESULT = tipoExpr;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOEXPR",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // TIPOEXPR ::= Signo_Arroba Identificador 
            {
              arbol RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int I2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int I2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object I2 = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

            arbol tipoExpr = new arbol("TIPOEXPR");
            tipoExpr.addHijo(new arbol(A.toString()));
            tipoExpr.addHijo(new arbol(I2.toString()));
            RESULT = tipoExpr;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOEXPR",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // TIPOEXPR ::= Fun_Arit Parentesis_Izq TIPOEXPR Coma TIPOEXPR Parentesis_Der 
            {
              arbol RESULT =null;
		int FAleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int FAright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object FA = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int PIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int PIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object PI = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int E1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int E1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		arbol E1 = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int E2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int E2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arbol E2 = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int PDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int PDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object PD = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

            arbol tipoExpr = new arbol("TIPOEXPR");
            tipoExpr.addHijo(new arbol(FA.toString()));
            tipoExpr.addHijo(new arbol(PI.toString()));
            tipoExpr.addHijo(E1);
            tipoExpr.addHijo(new arbol(C.toString()));
            tipoExpr.addHijo(E2);
            tipoExpr.addHijo(new arbol(PD.toString()));
            RESULT = tipoExpr;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOEXPR",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // TIPOEXPR ::= Fun_Esta Parentesis_Izq EXPRE_EST Parentesis_Der 
            {
              arbol RESULT =null;
		int FEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int FEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Object FE = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int PIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int PIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object PI = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int EEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int EEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		arbol EE = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int PDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int PDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object PD = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

            arbol tipoExpr = new arbol("TIPOEXPR");
            tipoExpr.addHijo(new arbol(FE.toString()));
            tipoExpr.addHijo(new arbol(PI.toString()));
            tipoExpr.addHijo(EE);
            tipoExpr.addHijo(new arbol(PD.toString()));
            RESULT = tipoExpr;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOEXPR",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // D_ARREGLO ::= Array Dos_Puntos Var_Tipo DosPuntos_Dobles Signo_Arroba Identificador Signo_Indicador Corchete_Izq LISTA_DATOS Corchete_Der End Punto_Coma 
            {
              arbol RESULT =null;
		int Aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int Aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object A = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int DPleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int DPright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object DP = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int Vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int Vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object V = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int DDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int DDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Object DD = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int SAleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int SAright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Object SA = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int Ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int Iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object I = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int Sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int Sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Object S = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int CIleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int CIright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object CI = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int LDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int LDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		arbol LD = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int CDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int CDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object CD = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int Eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object E = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int PCleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int PCright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object PC = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		

            arbol D_arreglo = new arbol("D_ARREGLO");
            D_arreglo.addHijo(new arbol(A.toString()));
            D_arreglo.addHijo(new arbol(DP.toString()));
            D_arreglo.addHijo(new arbol(V.toString()));
            D_arreglo.addHijo(new arbol(DD.toString()));
            D_arreglo.addHijo(new arbol(SA.toString()));
            D_arreglo.addHijo(new arbol(I.toString()));
            D_arreglo.addHijo(new arbol(S.toString()));
            D_arreglo.addHijo(new arbol(CI.toString()));
            D_arreglo.addHijo(LD);
            D_arreglo.addHijo(new arbol(CD.toString()));
            D_arreglo.addHijo(new arbol(E.toString()));
            D_arreglo.addHijo(new arbol(PC.toString()));
            RESULT = D_arreglo;
            
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("D_ARREGLO",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LISTA_DATOS ::= LISTA_DATOS Coma TIPOEXPR 
            {
              arbol RESULT =null;
		int LDleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int LDright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		arbol LD = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int Cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int Cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object C = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int TEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int TEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol TE = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                
                arbol ListaDatos = new arbol("LISTA_DATOS");
                ListaDatos.addHijo(LD);
                ListaDatos.addHijo(new arbol(C.toString()));
                ListaDatos.addHijo(TE);
                RESULT = ListaDatos;    
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_DATOS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LISTA_DATOS ::= TIPOEXPR 
            {
              arbol RESULT =null;
		int TEleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int TEright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		arbol TE = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
                arbol ListaDatos = new arbol("LISTA_DATOS");
                ListaDatos.addHijo(TE);
                RESULT = ListaDatos;   
                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_DATOS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRE_EST ::= Parentesis_Izq CONTENIDO Parentesis_Der 
            {
              arbol RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRE_EST",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRE_EST ::= CONTENIDO 
            {
              arbol RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRE_EST",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CONTENIDO ::= CONTENIDO Coma TIPOEXPR 
            {
              arbol RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CONTENIDO ::= TIPOEXPR 
            {
              arbol RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTENIDO",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // D_COMENTARIO ::= Fun_Consola DosPuntos_Dobles LISTA_COMENTARIO 
            {
              arbol RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("D_COMENTARIO",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // LISTA_COMENTARIO ::= Imprimir Signo_Igual SENTENCIA End Punto_Coma 
            {
              arbol RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_COMENTARIO",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // LISTA_COMENTARIO ::= Columna Signo_Igual CADENA Signo_IndicadorR TIPOARRAY End Punto_Coma 
            {
              arbol RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_COMENTARIO",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= SENTENCIA Coma TEXTO 
            {
              arbol RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= TEXTO 
            {
              arbol RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SENTENCIA",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // TEXTO ::= TIPOEXPR 
            {
              arbol RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TEXTO",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CADENA ::= Char_General 
            {
              arbol RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CADENA",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CADENA ::= Identificador 
            {
              arbol RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CADENA",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TIPOARRAY ::= LISTA_DATOS 
            {
              arbol RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOARRAY",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // TIPOARRAY ::= Corchete_Izq LISTA_DATOS Corchete_Der 
            {
              arbol RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOARRAY",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // D_GRAFICA ::= Tipo_Grafica Parentesis_Izq CONTGRAPH Ejecutar Tipo_Grafica End Punto_Coma Parentesis_Der End Punto_Coma 
            {
              arbol RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("D_GRAFICA",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CONTGRAPH ::= Titulo DosPuntos_Dobles Var_Tipo Signo_Igual Char_General End Punto_Coma Eje_X DosPuntos_Dobles Var_Tipo Signo_Igual Corchete_Izq LISTA_DATOS Corchete_Der End Punto_Coma Eje_Y DosPuntos_Dobles Var_Tipo Signo_Igual Corchete_Izq LISTA_DATOS Corchete_Der End Punto_Coma Titulo_X DosPuntos_Dobles Var_Tipo Signo_Igual Char_General End Punto_Coma Titulo_Y DosPuntos_Dobles Var_Tipo Signo_Igual Char_General End Punto_Coma 
            {
              arbol RESULT =null;
		int titleleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-34)).left;
		int titleright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-34)).right;
		Object title = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-34)).value;
		int contEjxleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-26)).left;
		int contEjxright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-26)).right;
		arbol contEjx = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-26)).value;
		int contEjyleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).left;
		int contEjyright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-17)).right;
		arbol contEjy = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-17)).value;
		int tituloXleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int tituloXright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Object tituloX = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int tituloYleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tituloYright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object tituloY = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTGRAPH",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-38)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CONTGRAPH ::= Grafica_Label DosPuntos_Dobles Var_Tipo Signo_Igual Corchete_Izq LISTA_DATOS Corchete_Der End Punto_Coma Grafica_Valores DosPuntos_Dobles Var_Tipo Signo_Igual Corchete_Izq LISTA_DATOS Corchete_Der End Punto_Coma Titulo DosPuntos_Dobles Var_Tipo Signo_Igual Char_General End Punto_Coma 
            {
              arbol RESULT =null;
		int labelPieleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)).left;
		int labelPieright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-19)).right;
		arbol labelPie = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-19)).value;
		int valuesPieleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int valuesPieright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		arbol valuesPie = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int titlePieleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int titlePieright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Object titlePie = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTGRAPH",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-24)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CONTGRAPH ::= Titulo DosPuntos_Dobles Var_Tipo Signo_Igual Char_General End Punto_Coma Grafica_Valores DosPuntos_Dobles Var_Tipo Signo_Igual Corchete_Izq LISTA_DATOS Corchete_Der End Punto_Coma 
            {
              arbol RESULT =null;
		int titleHisleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int titleHisright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		Object titleHis = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int valuesHistleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int valuesHistright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		arbol valuesHist = (arbol)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTGRAPH",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-15)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
